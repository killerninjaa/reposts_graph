{
  "version": 3,
  "sources": ["../../graphology-layout-forceatlas2/webworker.js", "../../graphology-layout-forceatlas2/worker.js"],
  "sourcesContent": ["/**\n * Graphology ForceAtlas2 Layout Webworker\n * ========================================\n *\n * Web worker able to run the layout in a separate thread.\n */\nmodule.exports = function worker() {\n  var NODES, EDGES;\n\n  var moduleShim = {};\n\n  (function () {\n    /* eslint no-constant-condition: 0 */\n/**\n * Graphology ForceAtlas2 Iteration\n * =================================\n *\n * Function used to perform a single iteration of the algorithm.\n */\n\n/**\n * Matrices properties accessors.\n */\nvar NODE_X = 0;\nvar NODE_Y = 1;\nvar NODE_DX = 2;\nvar NODE_DY = 3;\nvar NODE_OLD_DX = 4;\nvar NODE_OLD_DY = 5;\nvar NODE_MASS = 6;\nvar NODE_CONVERGENCE = 7;\nvar NODE_SIZE = 8;\nvar NODE_FIXED = 9;\n\nvar EDGE_SOURCE = 0;\nvar EDGE_TARGET = 1;\nvar EDGE_WEIGHT = 2;\n\nvar REGION_NODE = 0;\nvar REGION_CENTER_X = 1;\nvar REGION_CENTER_Y = 2;\nvar REGION_SIZE = 3;\nvar REGION_NEXT_SIBLING = 4;\nvar REGION_FIRST_CHILD = 5;\nvar REGION_MASS = 6;\nvar REGION_MASS_CENTER_X = 7;\nvar REGION_MASS_CENTER_Y = 8;\n\nvar SUBDIVISION_ATTEMPTS = 3;\n\n/**\n * Constants.\n */\nvar PPN = 10;\nvar PPE = 3;\nvar PPR = 9;\n\nvar MAX_FORCE = 10;\n\n/**\n * Function used to perform a single interation of the algorithm.\n *\n * @param  {object}       options    - Layout options.\n * @param  {Float32Array} NodeMatrix - Node data.\n * @param  {Float32Array} EdgeMatrix - Edge data.\n * @return {object}                  - Some metadata.\n */\nmoduleShim.exports = function iterate(options, NodeMatrix, EdgeMatrix) {\n  // Initializing variables\n  var l, r, n, n1, n2, rn, e, w, g, s;\n\n  var order = NodeMatrix.length,\n    size = EdgeMatrix.length;\n\n  var adjustSizes = options.adjustSizes;\n\n  var thetaSquared = options.barnesHutTheta * options.barnesHutTheta;\n\n  var outboundAttCompensation, coefficient, xDist, yDist, ewc, distance, factor;\n\n  var RegionMatrix = [];\n\n  // 1) Initializing layout data\n  //-----------------------------\n\n  // Resetting positions & computing max values\n  for (n = 0; n < order; n += PPN) {\n    NodeMatrix[n + NODE_OLD_DX] = NodeMatrix[n + NODE_DX];\n    NodeMatrix[n + NODE_OLD_DY] = NodeMatrix[n + NODE_DY];\n    NodeMatrix[n + NODE_DX] = 0;\n    NodeMatrix[n + NODE_DY] = 0;\n  }\n\n  // If outbound attraction distribution, compensate\n  if (options.outboundAttractionDistribution) {\n    outboundAttCompensation = 0;\n    for (n = 0; n < order; n += PPN) {\n      outboundAttCompensation += NodeMatrix[n + NODE_MASS];\n    }\n\n    outboundAttCompensation /= order / PPN;\n  }\n\n  // 1.bis) Barnes-Hut computation\n  //------------------------------\n\n  if (options.barnesHutOptimize) {\n    // Setting up\n    var minX = Infinity,\n      maxX = -Infinity,\n      minY = Infinity,\n      maxY = -Infinity,\n      q,\n      q2,\n      subdivisionAttempts;\n\n    // Computing min and max values\n    for (n = 0; n < order; n += PPN) {\n      minX = Math.min(minX, NodeMatrix[n + NODE_X]);\n      maxX = Math.max(maxX, NodeMatrix[n + NODE_X]);\n      minY = Math.min(minY, NodeMatrix[n + NODE_Y]);\n      maxY = Math.max(maxY, NodeMatrix[n + NODE_Y]);\n    }\n\n    // squarify bounds, it's a quadtree\n    var dx = maxX - minX,\n      dy = maxY - minY;\n    if (dx > dy) {\n      minY -= (dx - dy) / 2;\n      maxY = minY + dx;\n    } else {\n      minX -= (dy - dx) / 2;\n      maxX = minX + dy;\n    }\n\n    // Build the Barnes Hut root region\n    RegionMatrix[0 + REGION_NODE] = -1;\n    RegionMatrix[0 + REGION_CENTER_X] = (minX + maxX) / 2;\n    RegionMatrix[0 + REGION_CENTER_Y] = (minY + maxY) / 2;\n    RegionMatrix[0 + REGION_SIZE] = Math.max(maxX - minX, maxY - minY);\n    RegionMatrix[0 + REGION_NEXT_SIBLING] = -1;\n    RegionMatrix[0 + REGION_FIRST_CHILD] = -1;\n    RegionMatrix[0 + REGION_MASS] = 0;\n    RegionMatrix[0 + REGION_MASS_CENTER_X] = 0;\n    RegionMatrix[0 + REGION_MASS_CENTER_Y] = 0;\n\n    // Add each node in the tree\n    l = 1;\n    for (n = 0; n < order; n += PPN) {\n      // Current region, starting with root\n      r = 0;\n      subdivisionAttempts = SUBDIVISION_ATTEMPTS;\n\n      while (true) {\n        // Are there sub-regions?\n\n        // We look at first child index\n        if (RegionMatrix[r + REGION_FIRST_CHILD] >= 0) {\n          // There are sub-regions\n\n          // We just iterate to find a \"leaf\" of the tree\n          // that is an empty region or a region with a single node\n          // (see next case)\n\n          // Find the quadrant of n\n          if (NodeMatrix[n + NODE_X] < RegionMatrix[r + REGION_CENTER_X]) {\n            if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n              // Top Left quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD];\n            } else {\n              // Bottom Left quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n            }\n          } else {\n            if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n              // Top Right quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n            } else {\n              // Bottom Right quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n            }\n          }\n\n          // Update center of mass and mass (we only do it for non-leave regions)\n          RegionMatrix[r + REGION_MASS_CENTER_X] =\n            (RegionMatrix[r + REGION_MASS_CENTER_X] *\n              RegionMatrix[r + REGION_MASS] +\n              NodeMatrix[n + NODE_X] * NodeMatrix[n + NODE_MASS]) /\n            (RegionMatrix[r + REGION_MASS] + NodeMatrix[n + NODE_MASS]);\n\n          RegionMatrix[r + REGION_MASS_CENTER_Y] =\n            (RegionMatrix[r + REGION_MASS_CENTER_Y] *\n              RegionMatrix[r + REGION_MASS] +\n              NodeMatrix[n + NODE_Y] * NodeMatrix[n + NODE_MASS]) /\n            (RegionMatrix[r + REGION_MASS] + NodeMatrix[n + NODE_MASS]);\n\n          RegionMatrix[r + REGION_MASS] += NodeMatrix[n + NODE_MASS];\n\n          // Iterate on the right quadrant\n          r = q;\n          continue;\n        } else {\n          // There are no sub-regions: we are in a \"leaf\"\n\n          // Is there a node in this leave?\n          if (RegionMatrix[r + REGION_NODE] < 0) {\n            // There is no node in region:\n            // we record node n and go on\n            RegionMatrix[r + REGION_NODE] = n;\n            break;\n          } else {\n            // There is a node in this region\n\n            // We will need to create sub-regions, stick the two\n            // nodes (the old one r[0] and the new one n) in two\n            // subregions. If they fall in the same quadrant,\n            // we will iterate.\n\n            // Create sub-regions\n            RegionMatrix[r + REGION_FIRST_CHILD] = l * PPR;\n            w = RegionMatrix[r + REGION_SIZE] / 2; // new size (half)\n\n            // NOTE: we use screen coordinates\n            // from Top Left to Bottom Right\n\n            // Top Left sub-region\n            g = RegionMatrix[r + REGION_FIRST_CHILD];\n\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] - w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] - w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Bottom Left sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] - w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] + w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Top Right sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] + w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] - w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Bottom Right sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] + w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] + w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] =\n              RegionMatrix[r + REGION_NEXT_SIBLING];\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            l += 4;\n\n            // Now the goal is to find two different sub-regions\n            // for the two nodes: the one previously recorded (r[0])\n            // and the one we want to add (n)\n\n            // Find the quadrant of the old node\n            if (\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_X] <\n              RegionMatrix[r + REGION_CENTER_X]\n            ) {\n              if (\n                NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y] <\n                RegionMatrix[r + REGION_CENTER_Y]\n              ) {\n                // Top Left quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD];\n              } else {\n                // Bottom Left quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n              }\n            } else {\n              if (\n                NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y] <\n                RegionMatrix[r + REGION_CENTER_Y]\n              ) {\n                // Top Right quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n              } else {\n                // Bottom Right quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n              }\n            }\n\n            // We remove r[0] from the region r, add its mass to r and record it in q\n            RegionMatrix[r + REGION_MASS] =\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_MASS];\n            RegionMatrix[r + REGION_MASS_CENTER_X] =\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_X];\n            RegionMatrix[r + REGION_MASS_CENTER_Y] =\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y];\n\n            RegionMatrix[q + REGION_NODE] = RegionMatrix[r + REGION_NODE];\n            RegionMatrix[r + REGION_NODE] = -1;\n\n            // Find the quadrant of n\n            if (NodeMatrix[n + NODE_X] < RegionMatrix[r + REGION_CENTER_X]) {\n              if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n                // Top Left quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD];\n              } else {\n                // Bottom Left quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n              }\n            } else {\n              if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n                // Top Right quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n              } else {\n                // Bottom Right quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n              }\n            }\n\n            if (q === q2) {\n              // If both nodes are in the same quadrant,\n              // we have to try it again on this quadrant\n              if (subdivisionAttempts--) {\n                r = q;\n                continue; // while\n              } else {\n                // we are out of precision here, and we cannot subdivide anymore\n                // but we have to break the loop anyway\n                subdivisionAttempts = SUBDIVISION_ATTEMPTS;\n                break; // while\n              }\n            }\n\n            // If both quadrants are different, we record n\n            // in its quadrant\n            RegionMatrix[q2 + REGION_NODE] = n;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  // 2) Repulsion\n  //--------------\n  // NOTES: adjustSizes = antiCollision & scalingRatio = coefficient\n\n  if (options.barnesHutOptimize) {\n    coefficient = options.scalingRatio;\n\n    // Applying repulsion through regions\n    for (n = 0; n < order; n += PPN) {\n      // Computing leaf quad nodes iteration\n\n      r = 0; // Starting with root region\n      while (true) {\n        if (RegionMatrix[r + REGION_FIRST_CHILD] >= 0) {\n          // The region has sub-regions\n\n          // We run the Barnes Hut test to see if we are at the right distance\n          distance =\n            Math.pow(\n              NodeMatrix[n + NODE_X] - RegionMatrix[r + REGION_MASS_CENTER_X],\n              2\n            ) +\n            Math.pow(\n              NodeMatrix[n + NODE_Y] - RegionMatrix[r + REGION_MASS_CENTER_Y],\n              2\n            );\n\n          s = RegionMatrix[r + REGION_SIZE];\n\n          if ((4 * s * s) / distance < thetaSquared) {\n            // We treat the region as a single body, and we repulse\n\n            xDist =\n              NodeMatrix[n + NODE_X] - RegionMatrix[r + REGION_MASS_CENTER_X];\n            yDist =\n              NodeMatrix[n + NODE_Y] - RegionMatrix[r + REGION_MASS_CENTER_Y];\n\n            if (adjustSizes === true) {\n              //-- Linear Anti-collision Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    RegionMatrix[r + REGION_MASS]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              } else if (distance < 0) {\n                factor =\n                  (-coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    RegionMatrix[r + REGION_MASS]) /\n                  Math.sqrt(distance);\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            } else {\n              //-- Linear Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    RegionMatrix[r + REGION_MASS]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            }\n\n            // When this is done, we iterate. We have to look at the next sibling.\n            r = RegionMatrix[r + REGION_NEXT_SIBLING];\n            if (r < 0) break; // No next sibling: we have finished the tree\n\n            continue;\n          } else {\n            // The region is too close and we have to look at sub-regions\n            r = RegionMatrix[r + REGION_FIRST_CHILD];\n            continue;\n          }\n        } else {\n          // The region has no sub-region\n          // If there is a node r[0] and it is not n, then repulse\n          rn = RegionMatrix[r + REGION_NODE];\n\n          if (rn >= 0 && rn !== n) {\n            xDist = NodeMatrix[n + NODE_X] - NodeMatrix[rn + NODE_X];\n            yDist = NodeMatrix[n + NODE_Y] - NodeMatrix[rn + NODE_Y];\n\n            distance = xDist * xDist + yDist * yDist;\n\n            if (adjustSizes === true) {\n              //-- Linear Anti-collision Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    NodeMatrix[rn + NODE_MASS]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              } else if (distance < 0) {\n                factor =\n                  (-coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    NodeMatrix[rn + NODE_MASS]) /\n                  Math.sqrt(distance);\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            } else {\n              //-- Linear Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    NodeMatrix[rn + NODE_MASS]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            }\n          }\n\n          // When this is done, we iterate. We have to look at the next sibling.\n          r = RegionMatrix[r + REGION_NEXT_SIBLING];\n\n          if (r < 0) break; // No next sibling: we have finished the tree\n\n          continue;\n        }\n      }\n    }\n  } else {\n    coefficient = options.scalingRatio;\n\n    // Square iteration\n    for (n1 = 0; n1 < order; n1 += PPN) {\n      for (n2 = 0; n2 < n1; n2 += PPN) {\n        // Common to both methods\n        xDist = NodeMatrix[n1 + NODE_X] - NodeMatrix[n2 + NODE_X];\n        yDist = NodeMatrix[n1 + NODE_Y] - NodeMatrix[n2 + NODE_Y];\n\n        if (adjustSizes === true) {\n          //-- Anticollision Linear Repulsion\n          distance =\n            Math.sqrt(xDist * xDist + yDist * yDist) -\n            NodeMatrix[n1 + NODE_SIZE] -\n            NodeMatrix[n2 + NODE_SIZE];\n\n          if (distance > 0) {\n            factor =\n              (coefficient *\n                NodeMatrix[n1 + NODE_MASS] *\n                NodeMatrix[n2 + NODE_MASS]) /\n              distance /\n              distance;\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n            NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n          } else if (distance < 0) {\n            factor =\n              100 *\n              coefficient *\n              NodeMatrix[n1 + NODE_MASS] *\n              NodeMatrix[n2 + NODE_MASS];\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n            NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n          }\n        } else {\n          //-- Linear Repulsion\n          distance = Math.sqrt(xDist * xDist + yDist * yDist);\n\n          if (distance > 0) {\n            factor =\n              (coefficient *\n                NodeMatrix[n1 + NODE_MASS] *\n                NodeMatrix[n2 + NODE_MASS]) /\n              distance /\n              distance;\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n            NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n          }\n        }\n      }\n    }\n  }\n\n  // 3) Gravity\n  //------------\n  g = options.gravity / options.scalingRatio;\n  coefficient = options.scalingRatio;\n  for (n = 0; n < order; n += PPN) {\n    factor = 0;\n\n    // Common to both methods\n    xDist = NodeMatrix[n + NODE_X];\n    yDist = NodeMatrix[n + NODE_Y];\n    distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n\n    if (options.strongGravityMode) {\n      //-- Strong gravity\n      if (distance > 0) factor = coefficient * NodeMatrix[n + NODE_MASS] * g;\n    } else {\n      //-- Linear Anti-collision Repulsion n\n      if (distance > 0)\n        factor = (coefficient * NodeMatrix[n + NODE_MASS] * g) / distance;\n    }\n\n    // Updating node's dx and dy\n    NodeMatrix[n + NODE_DX] -= xDist * factor;\n    NodeMatrix[n + NODE_DY] -= yDist * factor;\n  }\n\n  // 4) Attraction\n  //---------------\n  coefficient =\n    1 * (options.outboundAttractionDistribution ? outboundAttCompensation : 1);\n\n  // TODO: simplify distance\n  // TODO: coefficient is always used as -c --> optimize?\n  for (e = 0; e < size; e += PPE) {\n    n1 = EdgeMatrix[e + EDGE_SOURCE];\n    n2 = EdgeMatrix[e + EDGE_TARGET];\n    w = EdgeMatrix[e + EDGE_WEIGHT];\n\n    // Edge weight influence\n    ewc = Math.pow(w, options.edgeWeightInfluence);\n\n    // Common measures\n    xDist = NodeMatrix[n1 + NODE_X] - NodeMatrix[n2 + NODE_X];\n    yDist = NodeMatrix[n1 + NODE_Y] - NodeMatrix[n2 + NODE_Y];\n\n    // Applying attraction to nodes\n    if (adjustSizes === true) {\n      distance =\n        Math.sqrt(xDist * xDist + yDist * yDist) -\n        NodeMatrix[n1 + NODE_SIZE] -\n        NodeMatrix[n2 + NODE_SIZE];\n\n      if (options.linLogMode) {\n        if (options.outboundAttractionDistribution) {\n          //-- LinLog Degree Distributed Anti-collision Attraction\n          if (distance > 0) {\n            factor =\n              (-coefficient * ewc * Math.log(1 + distance)) /\n              distance /\n              NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          //-- LinLog Anti-collision Attraction\n          if (distance > 0) {\n            factor = (-coefficient * ewc * Math.log(1 + distance)) / distance;\n          }\n        }\n      } else {\n        if (options.outboundAttractionDistribution) {\n          //-- Linear Degree Distributed Anti-collision Attraction\n          if (distance > 0) {\n            factor = (-coefficient * ewc) / NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          //-- Linear Anti-collision Attraction\n          if (distance > 0) {\n            factor = -coefficient * ewc;\n          }\n        }\n      }\n    } else {\n      distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n\n      if (options.linLogMode) {\n        if (options.outboundAttractionDistribution) {\n          //-- LinLog Degree Distributed Attraction\n          if (distance > 0) {\n            factor =\n              (-coefficient * ewc * Math.log(1 + distance)) /\n              distance /\n              NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          //-- LinLog Attraction\n          if (distance > 0)\n            factor = (-coefficient * ewc * Math.log(1 + distance)) / distance;\n        }\n      } else {\n        if (options.outboundAttractionDistribution) {\n          //-- Linear Attraction Mass Distributed\n          // NOTE: Distance is set to 1 to override next condition\n          distance = 1;\n          factor = (-coefficient * ewc) / NodeMatrix[n1 + NODE_MASS];\n        } else {\n          //-- Linear Attraction\n          // NOTE: Distance is set to 1 to override next condition\n          distance = 1;\n          factor = -coefficient * ewc;\n        }\n      }\n    }\n\n    // Updating nodes' dx and dy\n    // TODO: if condition or factor = 1?\n    if (distance > 0) {\n      // Updating nodes' dx and dy\n      NodeMatrix[n1 + NODE_DX] += xDist * factor;\n      NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n      NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n      NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n    }\n  }\n\n  // 5) Apply Forces\n  //-----------------\n  var force, swinging, traction, nodespeed, newX, newY;\n\n  // MATH: sqrt and square distances\n  if (adjustSizes === true) {\n    for (n = 0; n < order; n += PPN) {\n      if (NodeMatrix[n + NODE_FIXED] !== 1) {\n        force = Math.sqrt(\n          Math.pow(NodeMatrix[n + NODE_DX], 2) +\n            Math.pow(NodeMatrix[n + NODE_DY], 2)\n        );\n\n        if (force > MAX_FORCE) {\n          NodeMatrix[n + NODE_DX] =\n            (NodeMatrix[n + NODE_DX] * MAX_FORCE) / force;\n          NodeMatrix[n + NODE_DY] =\n            (NodeMatrix[n + NODE_DY] * MAX_FORCE) / force;\n        }\n\n        swinging =\n          NodeMatrix[n + NODE_MASS] *\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY])\n          );\n\n        traction =\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY])\n          ) / 2;\n\n        nodespeed = (0.1 * Math.log(1 + traction)) / (1 + Math.sqrt(swinging));\n\n        // Updating node's positon\n        newX =\n          NodeMatrix[n + NODE_X] +\n          NodeMatrix[n + NODE_DX] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_X] = newX;\n\n        newY =\n          NodeMatrix[n + NODE_Y] +\n          NodeMatrix[n + NODE_DY] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_Y] = newY;\n      }\n    }\n  } else {\n    for (n = 0; n < order; n += PPN) {\n      if (NodeMatrix[n + NODE_FIXED] !== 1) {\n        swinging =\n          NodeMatrix[n + NODE_MASS] *\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY])\n          );\n\n        traction =\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY])\n          ) / 2;\n\n        nodespeed =\n          (NodeMatrix[n + NODE_CONVERGENCE] * Math.log(1 + traction)) /\n          (1 + Math.sqrt(swinging));\n\n        // Updating node convergence\n        NodeMatrix[n + NODE_CONVERGENCE] = Math.min(\n          1,\n          Math.sqrt(\n            (nodespeed *\n              (Math.pow(NodeMatrix[n + NODE_DX], 2) +\n                Math.pow(NodeMatrix[n + NODE_DY], 2))) /\n              (1 + Math.sqrt(swinging))\n          )\n        );\n\n        // Updating node's positon\n        newX =\n          NodeMatrix[n + NODE_X] +\n          NodeMatrix[n + NODE_DX] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_X] = newX;\n\n        newY =\n          NodeMatrix[n + NODE_Y] +\n          NodeMatrix[n + NODE_DY] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_Y] = newY;\n      }\n    }\n  }\n\n  // We return the information about the layout (no need to return the matrices)\n  return {};\n};\n\n  })();\n\n  var iterate = moduleShim.exports;\n\n  self.addEventListener('message', function (event) {\n    var data = event.data;\n\n    NODES = new Float32Array(data.nodes);\n\n    if (data.edges) EDGES = new Float32Array(data.edges);\n\n    // Running the iteration\n    iterate(data.settings, NODES, EDGES);\n\n    // Sending result to supervisor\n    self.postMessage(\n      {\n        nodes: NODES.buffer\n      },\n      [NODES.buffer]\n    );\n  });\n};\n\n", "/**\n * Graphology ForceAtlas2 Layout Supervisor\n * =========================================\n *\n * Supervisor class able to spawn a web worker to run the FA2 layout in a\n * separate thread not to block UI with heavy synchronous computations.\n */\nvar workerFunction = require('./webworker.js');\nvar isGraph = require('graphology-utils/is-graph');\nvar createEdgeWeightGetter =\n  require('graphology-utils/getters').createEdgeWeightGetter;\nvar helpers = require('./helpers.js');\n\nvar DEFAULT_SETTINGS = require('./defaults.js');\n\n/**\n * Class representing a FA2 layout run by a webworker.\n *\n * @constructor\n * @param  {Graph}         graph        - Target graph.\n * @param  {object|number} params       - Parameters:\n * @param  {object}          [settings] - Settings.\n */\nfunction FA2LayoutSupervisor(graph, params) {\n  params = params || {};\n\n  // Validation\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout-forceatlas2/worker: the given graph is not a valid graphology instance.'\n    );\n\n  var getEdgeWeight = createEdgeWeightGetter(\n    'getEdgeWeight' in params ? params.getEdgeWeight : 'weight'\n  ).fromEntry;\n\n  // Validating settings\n  var settings = helpers.assign({}, DEFAULT_SETTINGS, params.settings);\n  var validationError = helpers.validateSettings(settings);\n\n  if (validationError)\n    throw new Error(\n      'graphology-layout-forceatlas2/worker: ' + validationError.message\n    );\n\n  // Properties\n  this.worker = null;\n  this.graph = graph;\n  this.settings = settings;\n  this.getEdgeWeight = getEdgeWeight;\n  this.matrices = null;\n  this.running = false;\n  this.killed = false;\n  this.outputReducer =\n    typeof params.outputReducer === 'function' ? params.outputReducer : null;\n\n  // Binding listeners\n  this.handleMessage = this.handleMessage.bind(this);\n\n  var respawnFrame = undefined;\n  var self = this;\n\n  this.handleGraphUpdate = function () {\n    if (self.worker) self.worker.terminate();\n\n    if (respawnFrame) clearTimeout(respawnFrame);\n\n    respawnFrame = setTimeout(function () {\n      respawnFrame = undefined;\n      self.spawnWorker();\n    }, 0);\n  };\n\n  graph.on('nodeAdded', this.handleGraphUpdate);\n  graph.on('edgeAdded', this.handleGraphUpdate);\n  graph.on('nodeDropped', this.handleGraphUpdate);\n  graph.on('edgeDropped', this.handleGraphUpdate);\n\n  // Spawning worker\n  this.spawnWorker();\n}\n\nFA2LayoutSupervisor.prototype.isRunning = function () {\n  return this.running;\n};\n\n/**\n * Internal method used to spawn the web worker.\n */\nFA2LayoutSupervisor.prototype.spawnWorker = function () {\n  if (this.worker) this.worker.terminate();\n\n  this.worker = helpers.createWorker(workerFunction);\n  this.worker.addEventListener('message', this.handleMessage);\n\n  if (this.running) {\n    this.running = false;\n    this.start();\n  }\n};\n\n/**\n * Internal method used to handle the worker's messages.\n *\n * @param {object} event - Event to handle.\n */\nFA2LayoutSupervisor.prototype.handleMessage = function (event) {\n  if (!this.running) return;\n\n  var matrix = new Float32Array(event.data.nodes);\n\n  helpers.assignLayoutChanges(this.graph, matrix, this.outputReducer);\n  if (this.outputReducer) helpers.readGraphPositions(this.graph, matrix);\n  this.matrices.nodes = matrix;\n\n  // Looping\n  this.askForIterations();\n};\n\n/**\n * Internal method used to ask for iterations from the worker.\n *\n * @param  {boolean} withEdges - Should we send edges along?\n * @return {FA2LayoutSupervisor}\n */\nFA2LayoutSupervisor.prototype.askForIterations = function (withEdges) {\n  var matrices = this.matrices;\n\n  var payload = {\n    settings: this.settings,\n    nodes: matrices.nodes.buffer\n  };\n\n  var buffers = [matrices.nodes.buffer];\n\n  if (withEdges) {\n    payload.edges = matrices.edges.buffer;\n    buffers.push(matrices.edges.buffer);\n  }\n\n  this.worker.postMessage(payload, buffers);\n\n  return this;\n};\n\n/**\n * Method used to start the layout.\n *\n * @return {FA2LayoutSupervisor}\n */\nFA2LayoutSupervisor.prototype.start = function () {\n  if (this.killed)\n    throw new Error(\n      'graphology-layout-forceatlas2/worker.start: layout was killed.'\n    );\n\n  if (this.running) return this;\n\n  // Building matrices\n  this.matrices = helpers.graphToByteArrays(this.graph, this.getEdgeWeight);\n\n  this.running = true;\n  this.askForIterations(true);\n\n  return this;\n};\n\n/**\n * Method used to stop the layout.\n *\n * @return {FA2LayoutSupervisor}\n */\nFA2LayoutSupervisor.prototype.stop = function () {\n  this.running = false;\n\n  return this;\n};\n\n/**\n * Method used to kill the layout.\n *\n * @return {FA2LayoutSupervisor}\n */\nFA2LayoutSupervisor.prototype.kill = function () {\n  if (this.killed) return this;\n\n  this.running = false;\n  this.killed = true;\n\n  // Clearing memory\n  this.matrices = null;\n\n  // Terminating worker\n  this.worker.terminate();\n\n  // Unbinding listeners\n  this.graph.removeListener('nodeAdded', this.handleGraphUpdate);\n  this.graph.removeListener('edgeAdded', this.handleGraphUpdate);\n  this.graph.removeListener('nodeDropped', this.handleGraphUpdate);\n  this.graph.removeListener('edgeDropped', this.handleGraphUpdate);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FA2LayoutSupervisor;\n"],
  "mappings": "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",
  "names": ["iterate", "self"]
}
