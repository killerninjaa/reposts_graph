{
  "version": 3,
  "sources": ["../../graphology-layout-forceatlas2/iterate.js", "../../graphology-layout-forceatlas2/index.js"],
  "sourcesContent": ["/* eslint no-constant-condition: 0 */\n/**\n * Graphology ForceAtlas2 Iteration\n * =================================\n *\n * Function used to perform a single iteration of the algorithm.\n */\n\n/**\n * Matrices properties accessors.\n */\nvar NODE_X = 0;\nvar NODE_Y = 1;\nvar NODE_DX = 2;\nvar NODE_DY = 3;\nvar NODE_OLD_DX = 4;\nvar NODE_OLD_DY = 5;\nvar NODE_MASS = 6;\nvar NODE_CONVERGENCE = 7;\nvar NODE_SIZE = 8;\nvar NODE_FIXED = 9;\n\nvar EDGE_SOURCE = 0;\nvar EDGE_TARGET = 1;\nvar EDGE_WEIGHT = 2;\n\nvar REGION_NODE = 0;\nvar REGION_CENTER_X = 1;\nvar REGION_CENTER_Y = 2;\nvar REGION_SIZE = 3;\nvar REGION_NEXT_SIBLING = 4;\nvar REGION_FIRST_CHILD = 5;\nvar REGION_MASS = 6;\nvar REGION_MASS_CENTER_X = 7;\nvar REGION_MASS_CENTER_Y = 8;\n\nvar SUBDIVISION_ATTEMPTS = 3;\n\n/**\n * Constants.\n */\nvar PPN = 10;\nvar PPE = 3;\nvar PPR = 9;\n\nvar MAX_FORCE = 10;\n\n/**\n * Function used to perform a single interation of the algorithm.\n *\n * @param  {object}       options    - Layout options.\n * @param  {Float32Array} NodeMatrix - Node data.\n * @param  {Float32Array} EdgeMatrix - Edge data.\n * @return {object}                  - Some metadata.\n */\nmodule.exports = function iterate(options, NodeMatrix, EdgeMatrix) {\n  // Initializing variables\n  var l, r, n, n1, n2, rn, e, w, g, s;\n\n  var order = NodeMatrix.length,\n    size = EdgeMatrix.length;\n\n  var adjustSizes = options.adjustSizes;\n\n  var thetaSquared = options.barnesHutTheta * options.barnesHutTheta;\n\n  var outboundAttCompensation, coefficient, xDist, yDist, ewc, distance, factor;\n\n  var RegionMatrix = [];\n\n  // 1) Initializing layout data\n  //-----------------------------\n\n  // Resetting positions & computing max values\n  for (n = 0; n < order; n += PPN) {\n    NodeMatrix[n + NODE_OLD_DX] = NodeMatrix[n + NODE_DX];\n    NodeMatrix[n + NODE_OLD_DY] = NodeMatrix[n + NODE_DY];\n    NodeMatrix[n + NODE_DX] = 0;\n    NodeMatrix[n + NODE_DY] = 0;\n  }\n\n  // If outbound attraction distribution, compensate\n  if (options.outboundAttractionDistribution) {\n    outboundAttCompensation = 0;\n    for (n = 0; n < order; n += PPN) {\n      outboundAttCompensation += NodeMatrix[n + NODE_MASS];\n    }\n\n    outboundAttCompensation /= order / PPN;\n  }\n\n  // 1.bis) Barnes-Hut computation\n  //------------------------------\n\n  if (options.barnesHutOptimize) {\n    // Setting up\n    var minX = Infinity,\n      maxX = -Infinity,\n      minY = Infinity,\n      maxY = -Infinity,\n      q,\n      q2,\n      subdivisionAttempts;\n\n    // Computing min and max values\n    for (n = 0; n < order; n += PPN) {\n      minX = Math.min(minX, NodeMatrix[n + NODE_X]);\n      maxX = Math.max(maxX, NodeMatrix[n + NODE_X]);\n      minY = Math.min(minY, NodeMatrix[n + NODE_Y]);\n      maxY = Math.max(maxY, NodeMatrix[n + NODE_Y]);\n    }\n\n    // squarify bounds, it's a quadtree\n    var dx = maxX - minX,\n      dy = maxY - minY;\n    if (dx > dy) {\n      minY -= (dx - dy) / 2;\n      maxY = minY + dx;\n    } else {\n      minX -= (dy - dx) / 2;\n      maxX = minX + dy;\n    }\n\n    // Build the Barnes Hut root region\n    RegionMatrix[0 + REGION_NODE] = -1;\n    RegionMatrix[0 + REGION_CENTER_X] = (minX + maxX) / 2;\n    RegionMatrix[0 + REGION_CENTER_Y] = (minY + maxY) / 2;\n    RegionMatrix[0 + REGION_SIZE] = Math.max(maxX - minX, maxY - minY);\n    RegionMatrix[0 + REGION_NEXT_SIBLING] = -1;\n    RegionMatrix[0 + REGION_FIRST_CHILD] = -1;\n    RegionMatrix[0 + REGION_MASS] = 0;\n    RegionMatrix[0 + REGION_MASS_CENTER_X] = 0;\n    RegionMatrix[0 + REGION_MASS_CENTER_Y] = 0;\n\n    // Add each node in the tree\n    l = 1;\n    for (n = 0; n < order; n += PPN) {\n      // Current region, starting with root\n      r = 0;\n      subdivisionAttempts = SUBDIVISION_ATTEMPTS;\n\n      while (true) {\n        // Are there sub-regions?\n\n        // We look at first child index\n        if (RegionMatrix[r + REGION_FIRST_CHILD] >= 0) {\n          // There are sub-regions\n\n          // We just iterate to find a \"leaf\" of the tree\n          // that is an empty region or a region with a single node\n          // (see next case)\n\n          // Find the quadrant of n\n          if (NodeMatrix[n + NODE_X] < RegionMatrix[r + REGION_CENTER_X]) {\n            if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n              // Top Left quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD];\n            } else {\n              // Bottom Left quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n            }\n          } else {\n            if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n              // Top Right quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n            } else {\n              // Bottom Right quarter\n              q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n            }\n          }\n\n          // Update center of mass and mass (we only do it for non-leave regions)\n          RegionMatrix[r + REGION_MASS_CENTER_X] =\n            (RegionMatrix[r + REGION_MASS_CENTER_X] *\n              RegionMatrix[r + REGION_MASS] +\n              NodeMatrix[n + NODE_X] * NodeMatrix[n + NODE_MASS]) /\n            (RegionMatrix[r + REGION_MASS] + NodeMatrix[n + NODE_MASS]);\n\n          RegionMatrix[r + REGION_MASS_CENTER_Y] =\n            (RegionMatrix[r + REGION_MASS_CENTER_Y] *\n              RegionMatrix[r + REGION_MASS] +\n              NodeMatrix[n + NODE_Y] * NodeMatrix[n + NODE_MASS]) /\n            (RegionMatrix[r + REGION_MASS] + NodeMatrix[n + NODE_MASS]);\n\n          RegionMatrix[r + REGION_MASS] += NodeMatrix[n + NODE_MASS];\n\n          // Iterate on the right quadrant\n          r = q;\n          continue;\n        } else {\n          // There are no sub-regions: we are in a \"leaf\"\n\n          // Is there a node in this leave?\n          if (RegionMatrix[r + REGION_NODE] < 0) {\n            // There is no node in region:\n            // we record node n and go on\n            RegionMatrix[r + REGION_NODE] = n;\n            break;\n          } else {\n            // There is a node in this region\n\n            // We will need to create sub-regions, stick the two\n            // nodes (the old one r[0] and the new one n) in two\n            // subregions. If they fall in the same quadrant,\n            // we will iterate.\n\n            // Create sub-regions\n            RegionMatrix[r + REGION_FIRST_CHILD] = l * PPR;\n            w = RegionMatrix[r + REGION_SIZE] / 2; // new size (half)\n\n            // NOTE: we use screen coordinates\n            // from Top Left to Bottom Right\n\n            // Top Left sub-region\n            g = RegionMatrix[r + REGION_FIRST_CHILD];\n\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] - w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] - w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Bottom Left sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] - w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] + w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Top Right sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] + w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] - w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] = g + PPR;\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            // Bottom Right sub-region\n            g += PPR;\n            RegionMatrix[g + REGION_NODE] = -1;\n            RegionMatrix[g + REGION_CENTER_X] =\n              RegionMatrix[r + REGION_CENTER_X] + w;\n            RegionMatrix[g + REGION_CENTER_Y] =\n              RegionMatrix[r + REGION_CENTER_Y] + w;\n            RegionMatrix[g + REGION_SIZE] = w;\n            RegionMatrix[g + REGION_NEXT_SIBLING] =\n              RegionMatrix[r + REGION_NEXT_SIBLING];\n            RegionMatrix[g + REGION_FIRST_CHILD] = -1;\n            RegionMatrix[g + REGION_MASS] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_X] = 0;\n            RegionMatrix[g + REGION_MASS_CENTER_Y] = 0;\n\n            l += 4;\n\n            // Now the goal is to find two different sub-regions\n            // for the two nodes: the one previously recorded (r[0])\n            // and the one we want to add (n)\n\n            // Find the quadrant of the old node\n            if (\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_X] <\n              RegionMatrix[r + REGION_CENTER_X]\n            ) {\n              if (\n                NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y] <\n                RegionMatrix[r + REGION_CENTER_Y]\n              ) {\n                // Top Left quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD];\n              } else {\n                // Bottom Left quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n              }\n            } else {\n              if (\n                NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y] <\n                RegionMatrix[r + REGION_CENTER_Y]\n              ) {\n                // Top Right quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n              } else {\n                // Bottom Right quarter\n                q = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n              }\n            }\n\n            // We remove r[0] from the region r, add its mass to r and record it in q\n            RegionMatrix[r + REGION_MASS] =\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_MASS];\n            RegionMatrix[r + REGION_MASS_CENTER_X] =\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_X];\n            RegionMatrix[r + REGION_MASS_CENTER_Y] =\n              NodeMatrix[RegionMatrix[r + REGION_NODE] + NODE_Y];\n\n            RegionMatrix[q + REGION_NODE] = RegionMatrix[r + REGION_NODE];\n            RegionMatrix[r + REGION_NODE] = -1;\n\n            // Find the quadrant of n\n            if (NodeMatrix[n + NODE_X] < RegionMatrix[r + REGION_CENTER_X]) {\n              if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n                // Top Left quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD];\n              } else {\n                // Bottom Left quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR;\n              }\n            } else {\n              if (NodeMatrix[n + NODE_Y] < RegionMatrix[r + REGION_CENTER_Y]) {\n                // Top Right quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 2;\n              } else {\n                // Bottom Right quarter\n                q2 = RegionMatrix[r + REGION_FIRST_CHILD] + PPR * 3;\n              }\n            }\n\n            if (q === q2) {\n              // If both nodes are in the same quadrant,\n              // we have to try it again on this quadrant\n              if (subdivisionAttempts--) {\n                r = q;\n                continue; // while\n              } else {\n                // we are out of precision here, and we cannot subdivide anymore\n                // but we have to break the loop anyway\n                subdivisionAttempts = SUBDIVISION_ATTEMPTS;\n                break; // while\n              }\n            }\n\n            // If both quadrants are different, we record n\n            // in its quadrant\n            RegionMatrix[q2 + REGION_NODE] = n;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  // 2) Repulsion\n  //--------------\n  // NOTES: adjustSizes = antiCollision & scalingRatio = coefficient\n\n  if (options.barnesHutOptimize) {\n    coefficient = options.scalingRatio;\n\n    // Applying repulsion through regions\n    for (n = 0; n < order; n += PPN) {\n      // Computing leaf quad nodes iteration\n\n      r = 0; // Starting with root region\n      while (true) {\n        if (RegionMatrix[r + REGION_FIRST_CHILD] >= 0) {\n          // The region has sub-regions\n\n          // We run the Barnes Hut test to see if we are at the right distance\n          distance =\n            Math.pow(\n              NodeMatrix[n + NODE_X] - RegionMatrix[r + REGION_MASS_CENTER_X],\n              2\n            ) +\n            Math.pow(\n              NodeMatrix[n + NODE_Y] - RegionMatrix[r + REGION_MASS_CENTER_Y],\n              2\n            );\n\n          s = RegionMatrix[r + REGION_SIZE];\n\n          if ((4 * s * s) / distance < thetaSquared) {\n            // We treat the region as a single body, and we repulse\n\n            xDist =\n              NodeMatrix[n + NODE_X] - RegionMatrix[r + REGION_MASS_CENTER_X];\n            yDist =\n              NodeMatrix[n + NODE_Y] - RegionMatrix[r + REGION_MASS_CENTER_Y];\n\n            if (adjustSizes === true) {\n              //-- Linear Anti-collision Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    RegionMatrix[r + REGION_MASS]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              } else if (distance < 0) {\n                factor =\n                  (-coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    RegionMatrix[r + REGION_MASS]) /\n                  Math.sqrt(distance);\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            } else {\n              //-- Linear Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    RegionMatrix[r + REGION_MASS]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            }\n\n            // When this is done, we iterate. We have to look at the next sibling.\n            r = RegionMatrix[r + REGION_NEXT_SIBLING];\n            if (r < 0) break; // No next sibling: we have finished the tree\n\n            continue;\n          } else {\n            // The region is too close and we have to look at sub-regions\n            r = RegionMatrix[r + REGION_FIRST_CHILD];\n            continue;\n          }\n        } else {\n          // The region has no sub-region\n          // If there is a node r[0] and it is not n, then repulse\n          rn = RegionMatrix[r + REGION_NODE];\n\n          if (rn >= 0 && rn !== n) {\n            xDist = NodeMatrix[n + NODE_X] - NodeMatrix[rn + NODE_X];\n            yDist = NodeMatrix[n + NODE_Y] - NodeMatrix[rn + NODE_Y];\n\n            distance = xDist * xDist + yDist * yDist;\n\n            if (adjustSizes === true) {\n              //-- Linear Anti-collision Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    NodeMatrix[rn + NODE_MASS]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              } else if (distance < 0) {\n                factor =\n                  (-coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    NodeMatrix[rn + NODE_MASS]) /\n                  Math.sqrt(distance);\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            } else {\n              //-- Linear Repulsion\n              if (distance > 0) {\n                factor =\n                  (coefficient *\n                    NodeMatrix[n + NODE_MASS] *\n                    NodeMatrix[rn + NODE_MASS]) /\n                  distance;\n\n                NodeMatrix[n + NODE_DX] += xDist * factor;\n                NodeMatrix[n + NODE_DY] += yDist * factor;\n              }\n            }\n          }\n\n          // When this is done, we iterate. We have to look at the next sibling.\n          r = RegionMatrix[r + REGION_NEXT_SIBLING];\n\n          if (r < 0) break; // No next sibling: we have finished the tree\n\n          continue;\n        }\n      }\n    }\n  } else {\n    coefficient = options.scalingRatio;\n\n    // Square iteration\n    for (n1 = 0; n1 < order; n1 += PPN) {\n      for (n2 = 0; n2 < n1; n2 += PPN) {\n        // Common to both methods\n        xDist = NodeMatrix[n1 + NODE_X] - NodeMatrix[n2 + NODE_X];\n        yDist = NodeMatrix[n1 + NODE_Y] - NodeMatrix[n2 + NODE_Y];\n\n        if (adjustSizes === true) {\n          //-- Anticollision Linear Repulsion\n          distance =\n            Math.sqrt(xDist * xDist + yDist * yDist) -\n            NodeMatrix[n1 + NODE_SIZE] -\n            NodeMatrix[n2 + NODE_SIZE];\n\n          if (distance > 0) {\n            factor =\n              (coefficient *\n                NodeMatrix[n1 + NODE_MASS] *\n                NodeMatrix[n2 + NODE_MASS]) /\n              distance /\n              distance;\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n            NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n          } else if (distance < 0) {\n            factor =\n              100 *\n              coefficient *\n              NodeMatrix[n1 + NODE_MASS] *\n              NodeMatrix[n2 + NODE_MASS];\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n            NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n          }\n        } else {\n          //-- Linear Repulsion\n          distance = Math.sqrt(xDist * xDist + yDist * yDist);\n\n          if (distance > 0) {\n            factor =\n              (coefficient *\n                NodeMatrix[n1 + NODE_MASS] *\n                NodeMatrix[n2 + NODE_MASS]) /\n              distance /\n              distance;\n\n            // Updating nodes' dx and dy\n            NodeMatrix[n1 + NODE_DX] += xDist * factor;\n            NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n            NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n            NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n          }\n        }\n      }\n    }\n  }\n\n  // 3) Gravity\n  //------------\n  g = options.gravity / options.scalingRatio;\n  coefficient = options.scalingRatio;\n  for (n = 0; n < order; n += PPN) {\n    factor = 0;\n\n    // Common to both methods\n    xDist = NodeMatrix[n + NODE_X];\n    yDist = NodeMatrix[n + NODE_Y];\n    distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n\n    if (options.strongGravityMode) {\n      //-- Strong gravity\n      if (distance > 0) factor = coefficient * NodeMatrix[n + NODE_MASS] * g;\n    } else {\n      //-- Linear Anti-collision Repulsion n\n      if (distance > 0)\n        factor = (coefficient * NodeMatrix[n + NODE_MASS] * g) / distance;\n    }\n\n    // Updating node's dx and dy\n    NodeMatrix[n + NODE_DX] -= xDist * factor;\n    NodeMatrix[n + NODE_DY] -= yDist * factor;\n  }\n\n  // 4) Attraction\n  //---------------\n  coefficient =\n    1 * (options.outboundAttractionDistribution ? outboundAttCompensation : 1);\n\n  // TODO: simplify distance\n  // TODO: coefficient is always used as -c --> optimize?\n  for (e = 0; e < size; e += PPE) {\n    n1 = EdgeMatrix[e + EDGE_SOURCE];\n    n2 = EdgeMatrix[e + EDGE_TARGET];\n    w = EdgeMatrix[e + EDGE_WEIGHT];\n\n    // Edge weight influence\n    ewc = Math.pow(w, options.edgeWeightInfluence);\n\n    // Common measures\n    xDist = NodeMatrix[n1 + NODE_X] - NodeMatrix[n2 + NODE_X];\n    yDist = NodeMatrix[n1 + NODE_Y] - NodeMatrix[n2 + NODE_Y];\n\n    // Applying attraction to nodes\n    if (adjustSizes === true) {\n      distance =\n        Math.sqrt(xDist * xDist + yDist * yDist) -\n        NodeMatrix[n1 + NODE_SIZE] -\n        NodeMatrix[n2 + NODE_SIZE];\n\n      if (options.linLogMode) {\n        if (options.outboundAttractionDistribution) {\n          //-- LinLog Degree Distributed Anti-collision Attraction\n          if (distance > 0) {\n            factor =\n              (-coefficient * ewc * Math.log(1 + distance)) /\n              distance /\n              NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          //-- LinLog Anti-collision Attraction\n          if (distance > 0) {\n            factor = (-coefficient * ewc * Math.log(1 + distance)) / distance;\n          }\n        }\n      } else {\n        if (options.outboundAttractionDistribution) {\n          //-- Linear Degree Distributed Anti-collision Attraction\n          if (distance > 0) {\n            factor = (-coefficient * ewc) / NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          //-- Linear Anti-collision Attraction\n          if (distance > 0) {\n            factor = -coefficient * ewc;\n          }\n        }\n      }\n    } else {\n      distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n\n      if (options.linLogMode) {\n        if (options.outboundAttractionDistribution) {\n          //-- LinLog Degree Distributed Attraction\n          if (distance > 0) {\n            factor =\n              (-coefficient * ewc * Math.log(1 + distance)) /\n              distance /\n              NodeMatrix[n1 + NODE_MASS];\n          }\n        } else {\n          //-- LinLog Attraction\n          if (distance > 0)\n            factor = (-coefficient * ewc * Math.log(1 + distance)) / distance;\n        }\n      } else {\n        if (options.outboundAttractionDistribution) {\n          //-- Linear Attraction Mass Distributed\n          // NOTE: Distance is set to 1 to override next condition\n          distance = 1;\n          factor = (-coefficient * ewc) / NodeMatrix[n1 + NODE_MASS];\n        } else {\n          //-- Linear Attraction\n          // NOTE: Distance is set to 1 to override next condition\n          distance = 1;\n          factor = -coefficient * ewc;\n        }\n      }\n    }\n\n    // Updating nodes' dx and dy\n    // TODO: if condition or factor = 1?\n    if (distance > 0) {\n      // Updating nodes' dx and dy\n      NodeMatrix[n1 + NODE_DX] += xDist * factor;\n      NodeMatrix[n1 + NODE_DY] += yDist * factor;\n\n      NodeMatrix[n2 + NODE_DX] -= xDist * factor;\n      NodeMatrix[n2 + NODE_DY] -= yDist * factor;\n    }\n  }\n\n  // 5) Apply Forces\n  //-----------------\n  var force, swinging, traction, nodespeed, newX, newY;\n\n  // MATH: sqrt and square distances\n  if (adjustSizes === true) {\n    for (n = 0; n < order; n += PPN) {\n      if (NodeMatrix[n + NODE_FIXED] !== 1) {\n        force = Math.sqrt(\n          Math.pow(NodeMatrix[n + NODE_DX], 2) +\n            Math.pow(NodeMatrix[n + NODE_DY], 2)\n        );\n\n        if (force > MAX_FORCE) {\n          NodeMatrix[n + NODE_DX] =\n            (NodeMatrix[n + NODE_DX] * MAX_FORCE) / force;\n          NodeMatrix[n + NODE_DY] =\n            (NodeMatrix[n + NODE_DY] * MAX_FORCE) / force;\n        }\n\n        swinging =\n          NodeMatrix[n + NODE_MASS] *\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY])\n          );\n\n        traction =\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY])\n          ) / 2;\n\n        nodespeed = (0.1 * Math.log(1 + traction)) / (1 + Math.sqrt(swinging));\n\n        // Updating node's positon\n        newX =\n          NodeMatrix[n + NODE_X] +\n          NodeMatrix[n + NODE_DX] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_X] = newX;\n\n        newY =\n          NodeMatrix[n + NODE_Y] +\n          NodeMatrix[n + NODE_DY] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_Y] = newY;\n      }\n    }\n  } else {\n    for (n = 0; n < order; n += PPN) {\n      if (NodeMatrix[n + NODE_FIXED] !== 1) {\n        swinging =\n          NodeMatrix[n + NODE_MASS] *\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] - NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] - NodeMatrix[n + NODE_DY])\n          );\n\n        traction =\n          Math.sqrt(\n            (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) *\n              (NodeMatrix[n + NODE_OLD_DX] + NodeMatrix[n + NODE_DX]) +\n              (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY]) *\n                (NodeMatrix[n + NODE_OLD_DY] + NodeMatrix[n + NODE_DY])\n          ) / 2;\n\n        nodespeed =\n          (NodeMatrix[n + NODE_CONVERGENCE] * Math.log(1 + traction)) /\n          (1 + Math.sqrt(swinging));\n\n        // Updating node convergence\n        NodeMatrix[n + NODE_CONVERGENCE] = Math.min(\n          1,\n          Math.sqrt(\n            (nodespeed *\n              (Math.pow(NodeMatrix[n + NODE_DX], 2) +\n                Math.pow(NodeMatrix[n + NODE_DY], 2))) /\n              (1 + Math.sqrt(swinging))\n          )\n        );\n\n        // Updating node's positon\n        newX =\n          NodeMatrix[n + NODE_X] +\n          NodeMatrix[n + NODE_DX] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_X] = newX;\n\n        newY =\n          NodeMatrix[n + NODE_Y] +\n          NodeMatrix[n + NODE_DY] * (nodespeed / options.slowDown);\n        NodeMatrix[n + NODE_Y] = newY;\n      }\n    }\n  }\n\n  // We return the information about the layout (no need to return the matrices)\n  return {};\n};\n", "/**\n * Graphology ForceAtlas2 Layout\n * ==============================\n *\n * Library endpoint.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar createEdgeWeightGetter =\n  require('graphology-utils/getters').createEdgeWeightGetter;\nvar iterate = require('./iterate.js');\nvar helpers = require('./helpers.js');\n\nvar DEFAULT_SETTINGS = require('./defaults.js');\n\n/**\n * Asbtract function used to run a certain number of iterations.\n *\n * @param  {boolean}       assign          - Whether to assign positions.\n * @param  {Graph}         graph           - Target graph.\n * @param  {object|number} params          - If number, params.iterations, else:\n * @param  {function}        getWeight     - Edge weight getter function.\n * @param  {number}          iterations    - Number of iterations.\n * @param  {function|null}   outputReducer - A node reducer\n * @param  {object}          [settings]    - Settings.\n * @return {object|undefined}\n */\nfunction abstractSynchronousLayout(assign, graph, params) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout-forceatlas2: the given graph is not a valid graphology instance.'\n    );\n\n  if (typeof params === 'number') params = {iterations: params};\n\n  var iterations = params.iterations;\n\n  if (typeof iterations !== 'number')\n    throw new Error(\n      'graphology-layout-forceatlas2: invalid number of iterations.'\n    );\n\n  if (iterations <= 0)\n    throw new Error(\n      'graphology-layout-forceatlas2: you should provide a positive number of iterations.'\n    );\n\n  var getEdgeWeight = createEdgeWeightGetter(\n    'getEdgeWeight' in params ? params.getEdgeWeight : 'weight'\n  ).fromEntry;\n\n  var outputReducer =\n    typeof params.outputReducer === 'function' ? params.outputReducer : null;\n\n  // Validating settings\n  var settings = helpers.assign({}, DEFAULT_SETTINGS, params.settings);\n  var validationError = helpers.validateSettings(settings);\n\n  if (validationError)\n    throw new Error(\n      'graphology-layout-forceatlas2: ' + validationError.message\n    );\n\n  // Building matrices\n  var matrices = helpers.graphToByteArrays(graph, getEdgeWeight);\n\n  var i;\n\n  // Iterating\n  for (i = 0; i < iterations; i++)\n    iterate(settings, matrices.nodes, matrices.edges);\n\n  // Applying\n  if (assign) {\n    helpers.assignLayoutChanges(graph, matrices.nodes, outputReducer);\n    return;\n  }\n\n  return helpers.collectLayoutChanges(graph, matrices.nodes);\n}\n\n/**\n * Function returning sane layout settings for the given graph.\n *\n * @param  {Graph|number} graph - Target graph or graph order.\n * @return {object}\n */\nfunction inferSettings(graph) {\n  var order = typeof graph === 'number' ? graph : graph.order;\n\n  return {\n    barnesHutOptimize: order > 2000,\n    strongGravityMode: true,\n    gravity: 0.05,\n    scalingRatio: 10,\n    slowDown: 1 + Math.log(order)\n  };\n}\n\n/**\n * Exporting.\n */\nvar synchronousLayout = abstractSynchronousLayout.bind(null, false);\nsynchronousLayout.assign = abstractSynchronousLayout.bind(null, true);\nsynchronousLayout.inferSettings = inferSettings;\n\nmodule.exports = synchronousLayout;\n"],
  "mappings": "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",
  "names": []
}
